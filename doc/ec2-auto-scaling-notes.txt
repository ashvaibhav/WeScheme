EC2 Auto scaling notes

Prerequisites:

    The autoscaling tools:
    http://aws.amazon.com/developertools/2535?_encoding=UTF8&jiveRedirect=1

    The cloudwatch tools:
    http://aws.amazon.com/developertools/2534?_encoding=UTF8&jiveRedirect=1




Creating the launch configuration:

    $ as-create-launch-config LaunchConfig-East-20120808 --image-id ami-9fde74f6 --instance-type m1.medium --group quicklaunch-1 --region us-east-1
    $ as-create-launch-config LaunchConfig-West-20120808 --image-id ami-a8038c98 --instance-type m1.medium --group quicklaunch-1 --region us-west-2




Creating the auto-scaling groups, attached to a particular load balancer:

    $ as-create-auto-scaling-group WeSchemeCompilerGroup-West --launch-configuration LaunchConfig-West-20120808 --availability-zones us-west-2a --min-size 1 --max-size 10 --load-balancers balanced-wescheme-compilers

    $ as-create-auto-scaling-group WeSchemeCompilerGroup-East --launch-configuration LaunchConfig-East-20120808 --availability-zones us-east-1c --min-size 1 --max-size 10 --load-balancers LoadBalancerEast --region us-east-1



Listing the current auto-scaling groups in question:

    $ as-describe-auto-scaling-groups --region us-east-2
    $ as-describe-auto-scaling-groups --region us-west-2


----------------------------------------------------------------------

When we want to update the launch configuration of an autoscaling group:

    0.  Set up the emergency servers and attach them to the load balancer.
    1.  Create a new launch configuration.
    2.  Update the autoscaling group to the new configuration.

e.g, when we create a new image-id on the west coast, first create a fresh launch config

    $ as-create-launch-config LaunchConfig-West-20130320 --image-id ami-33f56103 --instance-type m1.medium --group quicklaunch-1 --region us-west-2

then update the autoscaling group;

    $ as-update-auto-scaling-group WeSchemeCompilerGroup-West --region us-west-2 --min-size 0 --max-size 0
    $ as-update-auto-scaling-group WeSchemeCompilerGroup-West --region us-west-2 --launch-configuration LaunchConfig-West-20130320
    $ as-update-auto-scaling-group WeSchemeCompilerGroup-West --region us-west-2 --min-size 1 --max-size 10


----------------------------------------------------------------------



Creating the policies for adding a new instances to these group:

    $ as-put-scaling-policy MyScaleUpPolicy --auto-scaling-group WeSchemeCompilerGroup-West --adjustment=1 --type ChangeInCapacity --cooldown 300 --region us-west-2

    $ as-put-scaling-policy MyScaleUpPolicy --auto-scaling-group WeSchemeCompilerGroup-East --adjustment=1 --type ChangeInCapacity --cooldown 300 --region us-east-1



Adding a CloudWatch alarm that will trigger this scaling-up policy on high load.  1 minute at 40% CPU:

    $ mon-put-metric-alarm MyHighCPUAlarm --comparison-operator GreaterThanThreshold --evaluation-periods 1 --metric-name CPUUtilization --namespace "AWS/EC2" --period 60 --statistic Average --threshold 40 --alarm-actions  arn:aws:autoscaling:us-west-2:093537034380:scalingPolicy:0c0d1a8a-8828-4395-99ae-8fb35b098e85:autoScalingGroupName/WeSchemeCompilerGroup:policyName/MyScaleUpPolicy --dimensions "AutoScalingGroupName=WeSchemeCompilerGroup" --region us-west-2

    $ mon-put-metric-alarm MyHighCPUAlarm --comparison-operator GreaterThanThreshold --evaluation-periods 1 --metric-name CPUUtilization --namespace "AWS/EC2" --period 60 --statistic Average --threshold 40 --alarm-actions arn:aws:autoscaling:us-east-1:093537034380:scalingPolicy:62cdf7ae-1d9e-4436-bc77-603c00f63e5f:autoScalingGroupName/WeSchemeCompilerGroup-East:policyName/MyScaleUpPolicy --dimensions "AutoScalingGroupName=WeSchemeCompilerGroup-East" --region us-east-1




Creating the other policy for dropping instances:

    $ as-put-scaling-policy MyScaleDownPolicy --auto-scaling-group WeSchemeCompilerGroup-West --adjustment=-1 --type ChangeInCapacity --cooldown 300 --region us-west-2

    $ as-put-scaling-policy MyScaleDownPolicy --auto-scaling-group WeSchemeCompilerGroup-East --adjustment=-1 --type ChangeInCapacity --cooldown 300 --region us-east-1


and adding the corresponding CloudWatch alarms on idleness < 10% CPU for at least 30 minutes.:


    $ mon-put-metric-alarm MyLowCPUAlarm --comparison-operator LessThanThreshold --evaluation-periods=1 --metric-name CPUUtilization --namespace "AWS/EC2" --period 1800 --statistic Average --threshold 10 --alarm-actions arn:aws:autoscaling:us-west-2:093537034380:scalingPolicy:3a6b57eb-c9c2-4360-8de8-5056b414c66b:autoScalingGroupName/WeSchemeCompilerGroup:policyName/MyScaleDownPolicy --dimensions "AutoScalingGroupName=WeSchemeCompilerGroup" --region us-west-2

    $ mon-put-metric-alarm MyLowCPUAlarm --comparison-operator LessThanThreshold --evaluation-periods=1 --metric-name CPUUtilization --namespace "AWS/EC2" --period 1800 --statistic Average --threshold 10 --alarm-actions arn:aws:autoscaling:us-east-1:093537034380:scalingPolicy:b09438e3-8e77-4e20-9e03-40484c295922:autoScalingGroupName/WeSchemeCompilerGroup-East:policyName/MyScaleDownPolicy --dimensions "AutoScalingGroupName=WeSchemeCompilerGroup-East" --region us-east-1


----------------------------------------------------------------------

Changing the launch configuration:

1.  Make sure to add an instance to each load balancer to account for
    the disappearance of the auto-scaling group.

2.  Shut down existing instances by updating the max and min size of
    the groups down to zero.




======================================================================

The ec2 instances are configured with a keep-alive script to keep
the web servers up and running.  Here are notes on what it's doing:

Implementation details: I have a crontab entry that runs every minute:

###############
## Every minute, run the keep-alive.
* * * * * cd /home/ubuntu && ./keep_alive.sh
###############

The keep_alive.sh checks the network connection, and if it's down, reruns the web server startup:



#############################################
ubuntu@ip-10-250-16-219:~$ cat keep_alive.sh 
#!/bin/sh
/home/ubuntu/racket/bin/racket /home/ubuntu/is_dead.rkt
if [ $? -eq "1" ];
then
    /home/ubuntu/startup.sh
else
    :
fi
#############################################



Checking whether the service is up or not is a HTTP GET:

#############################################
ubuntu@ip-10-250-16-219:~$ cat is_dead.rkt 
#lang racket/base
;; exits with 1 if the system thinks the local web server is down.
(require net/url)
(with-handlers ([exn:fail:network? (lambda (exn) (exit 1))])
  (get-pure-port (string->url "http://localhost:8000/"))
  (exit 0))
#############################################
